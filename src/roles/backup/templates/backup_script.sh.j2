#!/bin/bash
# Mailu Backup Script
# Generated by Ansible - Do not edit manually

set -e

# Configuration variables
BACKUP_TYPE=${1:-daily}
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="{{ backup_base_dir }}"
MAILU_DIR="{{ mailu_base_dir }}"
MAILU_DATA_DIR="{{ mailu_data_dir }}"
BACKUP_TMP_DIR="${BACKUP_DIR}/tmp"
BACKUP_DEST_DIR="${BACKUP_DIR}/${BACKUP_TYPE}"
HOSTNAME=$(hostname -f)
BACKUP_FILE="${BACKUP_DEST_DIR}/${BACKUP_TYPE}-${HOSTNAME}-${TIMESTAMP}.tar.{{ backup_compression_algorithm }}"
LOG_FILE="${BACKUP_DIR}/logs/backup-${BACKUP_TYPE}-${TIMESTAMP}.log"

# Ensure log directory exists
mkdir -p "${BACKUP_DIR}/logs"

# Start logging
exec > >(tee -a "${LOG_FILE}") 2>&1

echo "===== MAILU BACKUP STARTED - $(date) ====="
echo "Backup type: ${BACKUP_TYPE}"
echo "Target file: ${BACKUP_FILE}"

# Ensure backup directories exist
mkdir -p "${BACKUP_DEST_DIR}"
mkdir -p "${BACKUP_TMP_DIR}"

# Clean up any previous tmp files
rm -rf "${BACKUP_TMP_DIR:?}/"*

# Stop or pause services if specified
{% if backup_stop_services | default(false) %}
echo "Stopping Mailu services before backup..."
cd "${MAILU_DIR}"
docker-compose stop
{% endif %}

# Create temporary structure for backup
echo "Creating backup structure..."
mkdir -p "${BACKUP_TMP_DIR}/mailu-config"
mkdir -p "${BACKUP_TMP_DIR}/mailu-data"
mkdir -p "${BACKUP_TMP_DIR}/certs"
mkdir -p "${BACKUP_TMP_DIR}/traefik-config"
mkdir -p "${BACKUP_TMP_DIR}/metadata"

# Backup metadata (version info, timestamp, etc.)
echo "Backing up metadata..."
echo "Backup date: $(date)" > "${BACKUP_TMP_DIR}/metadata/backup-info.txt"
echo "Backup type: ${BACKUP_TYPE}" >> "${BACKUP_TMP_DIR}/metadata/backup-info.txt"
echo "Hostname: ${HOSTNAME}" >> "${BACKUP_TMP_DIR}/metadata/backup-info.txt"

# Copy configuration files
echo "Backing up configuration files..."
{% if backup_mailu_config %}
cp -a "${MAILU_DIR}"/*.yml "${BACKUP_TMP_DIR}/mailu-config/" 2>/dev/null || true
cp -a "${MAILU_DIR}"/*.env "${BACKUP_TMP_DIR}/mailu-config/" 2>/dev/null || true
cp -a "${MAILU_DIR}"/docker-compose.yml "${BACKUP_TMP_DIR}/mailu-config/" 2>/dev/null || true
{% endif %}

{% if backup_traefik_config %}
# Backup Traefik configuration
echo "Backing up Traefik configuration..."
cp -a "{{ traefik_config_dir | default('/opt/traefik/config') }}"/* "${BACKUP_TMP_DIR}/traefik-config/" 2>/dev/null || true
{% endif %}

{% if backup_mailu_data %}
# Backup Mailu data
echo "Backing up Mailu data..."
# Use rsync to copy only the most important data directories
rsync -aAX --info=progress2 \
  "${MAILU_DATA_DIR}/mail" \
  "${MAILU_DATA_DIR}/filter" \
  "${MAILU_DATA_DIR}/dkim" \
  "${MAILU_DATA_DIR}/redis" \
  "${MAILU_DATA_DIR}/data" \
  "${BACKUP_TMP_DIR}/mailu-data/" 2>/dev/null || true
{% endif %}

{% if backup_certificates %}
# Backup certificates
echo "Backing up certificates..."
cp -a "${MAILU_BASE_DIR}/certs"/* "${BACKUP_TMP_DIR}/certs/" 2>/dev/null || true
cp -a "{{ traefik_acme_dir | default('/opt/traefik/acme') }}"/* "${BACKUP_TMP_DIR}/certs/" 2>/dev/null || true
{% endif %}

# Create the archive
echo "Creating backup archive..."
cd "${BACKUP_TMP_DIR}"
{% if backup_compression_algorithm == "gzip" %}
tar -czf "${BACKUP_FILE}" ./*
{% elif backup_compression_algorithm == "bzip2" %}
tar -cjf "${BACKUP_FILE}" ./*
{% elif backup_compression_algorithm == "xz" %}
tar -cJf "${BACKUP_FILE}" ./*
{% endif %}

# Encrypt the archive if enabled
{% if backup_encryption %}
echo "Encrypting backup archive..."
ENCRYPTED_FILE="${BACKUP_FILE}.gpg"
gpg --batch --yes --passphrase "{{ lookup('vars', backup_encryption_passphrase_var) }}" \
    --symmetric --cipher-algo AES256 "${BACKUP_FILE}"
rm -f "${BACKUP_FILE}"
BACKUP_FILE="${ENCRYPTED_FILE}"
{% endif %}

# Clean up temporary files
echo "Cleaning up temporary files..."
rm -rf "${BACKUP_TMP_DIR:?}/"*

# Start services if they were stopped
{% if backup_stop_services | default(false) %}
echo "Starting Mailu services after backup..."
cd "${MAILU_DIR}"
docker-compose start
{% endif %}

# Upload to remote storage if configured
{% if backup_strategy == "s3" %}
echo "Uploading backup to S3..."
AWS_CONFIG_FILE="${BACKUP_DIR}/.aws/config"
AWS_SHARED_CREDENTIALS_FILE="${BACKUP_DIR}/.aws/credentials"
export AWS_CONFIG_FILE AWS_SHARED_CREDENTIALS_FILE

aws s3 cp "${BACKUP_FILE}" "s3://{{ s3_bucket }}/{{ s3_path }}/${BACKUP_TYPE}/"
if [ $? -eq 0 ]; then
    echo "S3 upload successful."
else
    echo "ERROR: S3 upload failed."
fi
{% elif backup_strategy == "b2" %}
echo "Uploading backup to B2..."
# B2 upload logic here
{% elif backup_strategy == "sftp" %}
echo "Uploading backup to SFTP server..."
scp -i "${BACKUP_DIR}/ssh_key" "${BACKUP_FILE}" "{{ sftp_user }}@{{ sftp_host }}:{{ sftp_path }}/${BACKUP_TYPE}/"
{% endif %}

echo "Backup size: $(du -h "${BACKUP_FILE}" | cut -f1)"
echo "===== MAILU BACKUP COMPLETED - $(date) ====="

# Send notification if enabled
{% if backup_notify_enabled %}
if [ $? -eq 0 ]; then
    if [ "{{ backup_notify_on_success }}" == "true" ]; then
        "${BACKUP_DIR}/scripts/notify.sh" "Mailu Backup Successful" "A ${BACKUP_TYPE} backup was completed successfully on ${HOSTNAME} at $(date). Backup file: ${BACKUP_FILE}"
    fi
else
    if [ "{{ backup_notify_on_failure }}" == "true" ]; then
        "${BACKUP_DIR}/scripts/notify.sh" "Mailu Backup Failed" "A ${BACKUP_TYPE} backup failed on ${HOSTNAME} at $(date)."
    fi
fi
{% endif %}

exit 0