#!/bin/bash
# Mailu restore script - Generated by Ansible
# This script restores data from encrypted backup archives

set -e
set -o pipefail

# Configuration variables from Ansible
BACKUP_BASE_DIR="{{ backup_base_dir }}"
BACKUP_TMP_DIR="${BACKUP_BASE_DIR}/restore_tmp"
BACKUP_ARCHIVE_DIR="{{ backup_local_path }}"
MAILU_BASE_DIR="{{ mailu_base_dir }}"
RESTORE_LOG="${BACKUP_BASE_DIR}/restore.log"

# Notification settings
NOTIFY_ENABLED={{ backup_notify_enabled | bool | lower }}
{% if ntfy_enabled | default(false) %}
NTFY_URL="{{ ntfy_url }}"
NTFY_TOPIC="{{ ntfy_topic }}"
{% if ntfy_auth_token is defined %}
NTFY_AUTH="{{ ntfy_auth_token }}"
{% endif %}
{% endif %}

# Source environment variables from Mailu .env file (needed for encryption key)
source "${MAILU_BASE_DIR}/.env"

# Function for notifications
send_notification() {
    if [ "${NOTIFY_ENABLED}" = "true" ] && [ -n "${NTFY_URL}" ]; then
        local title="$1"
        local message="$2"
        local priority="$3"
        
        local auth_header=""
        if [ -n "${NTFY_AUTH}" ]; then
            auth_header="-H 'Authorization: Bearer ${NTFY_AUTH}'"
        fi
        
        curl -s "${auth_header}" \
            -H "Title: ${title}" \
            -H "Priority: ${priority}" \
            -d "${message}" \
            "${NTFY_URL}/${NTFY_TOPIC}"
    fi
}

log() {
    local message="$1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ${message}" | tee -a "${RESTORE_LOG}"
}

show_usage() {
    echo "Usage: $0 [options] <backup_file>"
    echo ""
    echo "Options:"
    echo "  -h, --help                 Show this help message"
    echo "  -l, --list                 List available backups"
    echo "  -c, --config-only          Restore only configuration files"
    echo "  -d, --data-only            Restore only mail data"
    echo "  -k, --dkim-only            Restore only DKIM keys"
    echo "  -f, --force                Force restore without confirmation"
    echo ""
    echo "Examples:"
    echo "  $0 --list                          List all available backups"
    echo "  $0 /path/to/mailu-backup-date.tar.gz.gpg   Restore from specified backup"
    echo "  $0 --config-only latest            Restore only configs from the latest backup"
    echo ""
}

list_backups() {
    echo "Available backups:"
    echo "-----------------"
    find "${BACKUP_ARCHIVE_DIR}" -name "{{ backup_prefix }}-*.tar.gz*" -type f | sort -r | while read -r backup; do
        created=$(date -r "$backup" "+%Y-%m-%d %H:%M:%S")
        size=$(du -h "$backup" | cut -f1)
        echo "$(basename "$backup") - $created - $size"
    done
}

get_latest_backup() {
    find "${BACKUP_ARCHIVE_DIR}" -name "{{ backup_prefix }}-*.tar.gz*" -type f | sort -r | head -n1
}

# Process arguments
RESTORE_CONFIG=true
RESTORE_MAIL_DATA=true
RESTORE_DKIM=true
FORCE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -l|--list)
            list_backups
            exit 0
            ;;
        -c|--config-only)
            RESTORE_CONFIG=true
            RESTORE_MAIL_DATA=false
            RESTORE_DKIM=false
            shift
            ;;
        -d|--data-only)
            RESTORE_CONFIG=false
            RESTORE_MAIL_DATA=true
            RESTORE_DKIM=false
            shift
            ;;
        -k|--dkim-only)
            RESTORE_CONFIG=false
            RESTORE_MAIL_DATA=false
            RESTORE_DKIM=true
            shift
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        *)
            BACKUP_FILE="$1"
            shift
            ;;
    esac
done

# If no backup file is specified, show usage
if [ -z "${BACKUP_FILE}" ]; then
    show_usage
    exit 1
fi

# Handle "latest" as a special keyword
if [ "${BACKUP_FILE}" == "latest" ]; then
    BACKUP_FILE=$(get_latest_backup)
    if [ -z "${BACKUP_FILE}" ]; then
        log "ERROR: No backups found"
        exit 1
    fi
    log "Using latest backup: $(basename "${BACKUP_FILE}")"
fi

# Check if backup file exists
if [ ! -f "${BACKUP_FILE}" ]; then
    # Try looking in the backup archive directory
    if [ -f "${BACKUP_ARCHIVE_DIR}/${BACKUP_FILE}" ]; then
        BACKUP_FILE="${BACKUP_ARCHIVE_DIR}/${BACKUP_FILE}"
    else
        log "ERROR: Backup file does not exist: ${BACKUP_FILE}"
        exit 1
    fi
fi

# Ask for confirmation unless --force is used
if [ "${FORCE}" != "true" ]; then
    echo "WARNING: This will restore Mailu from backup and OVERWRITE existing data."
    echo "Backup file: ${BACKUP_FILE}"
    echo "Restore config: ${RESTORE_CONFIG}"
    echo "Restore mail data: ${RESTORE_MAIL_DATA}"
    echo "Restore DKIM keys: ${RESTORE_DKIM}"
    echo ""
    read -r -p "Are you sure you want to continue? [y/N] " response
    case "$response" in
        [yY][eE][sS]|[yY]) 
            # Continue with restore
            ;;
        *)
            echo "Restore cancelled."
            exit 0
            ;;
    esac
fi

# Start restore process
log "Starting Mailu restore from $(basename "${BACKUP_FILE}")"
send_notification "Mailu Restore Starting" "Starting restore from $(basename "${BACKUP_FILE}")" "high"

# Create temporary directory for restore
mkdir -p "${BACKUP_TMP_DIR}"

# Process encrypted backups
if [[ "${BACKUP_FILE}" == *.gpg ]]; then
    log "Decrypting backup file"
    # Check if encryption key is available
    if [ -z "${{{ backup_encryption_key_var }}}" ]; then
        log "ERROR: Encryption key not found in environment"
        send_notification "Mailu Restore Failed" "Encryption key not found" "high"
        exit 1
    fi
    
    # Decrypt with the key
    DECRYPTED_FILE="${BACKUP_TMP_DIR}/$(basename "${BACKUP_FILE}" .gpg)"
    echo "${{{ backup_encryption_key_var }}}" | gpg --batch --yes --passphrase-fd 0 \
        --decrypt -o "${DECRYPTED_FILE}" "${BACKUP_FILE}"
    WORKING_BACKUP="${DECRYPTED_FILE}"
else
    WORKING_BACKUP="${BACKUP_FILE}"
fi

# Extract the backup
log "Extracting backup archive"
tar -xzf "${WORKING_BACKUP}" -C "${BACKUP_TMP_DIR}"

# Check backup validity
if [ ! -f "${BACKUP_TMP_DIR}/backup-info.txt" ]; then
    log "ERROR: Invalid backup file, missing backup-info.txt"
    send_notification "Mailu Restore Failed" "Invalid backup file" "high"
    rm -rf "${BACKUP_TMP_DIR:?}"/*
    exit 1
fi

log "Backup information:"
cat "${BACKUP_TMP_DIR}/backup-info.txt"

# Stop Mailu services before restore
log "Stopping Mailu services"
cd "${MAILU_BASE_DIR}" || exit 1
docker-compose down

# Restore configuration files
if [ "${RESTORE_CONFIG}" = "true" ]; then
    log "Restoring configuration files"
    
    # Backup existing config before overwriting
    if [ -f "${MAILU_BASE_DIR}/.env" ]; then
        cp "${MAILU_BASE_DIR}/.env" "${MAILU_BASE_DIR}/.env.bak-$(date +%Y%m%d%H%M%S)"
    fi
    
    if [ -f "${BACKUP_TMP_DIR}/mailu-env.txt" ]; then
        cp "${BACKUP_TMP_DIR}/mailu-env.txt" "${MAILU_BASE_DIR}/.env"
    fi
    
    if [ -f "${BACKUP_TMP_DIR}/docker-compose.yml" ]; then
        cp "${BACKUP_TMP_DIR}/docker-compose.yml" "${MAILU_BASE_DIR}/docker-compose.yml"
    fi
    
    # Restore Traefik configuration if available
    if [ -d "${BACKUP_TMP_DIR}/traefik-config" ]; then
        cp -r "${BACKUP_TMP_DIR}/traefik-config"/* "{{ traefik_config_dir }}/"
    fi
    
    # Restore database
    if [ -f "${BACKUP_TMP_DIR}/db/main.db" ]; then
        mkdir -p "${MAILU_BASE_DIR}/data"
        cp "${BACKUP_TMP_DIR}/db/main.db" "${MAILU_BASE_DIR}/data/main.db"
    fi
    
    log "Configuration restored"
fi

# Restore mail data
if [ "${RESTORE_MAIL_DATA}" = "true" ]; then
    log "Restoring mail data"
    
    # Check if we have mail data in the backup
    if [ -f "${BACKUP_TMP_DIR}/mail_data/mail.tar.gz" ]; then
        # Extract mail data to Mailu base directory
        tar -xzf "${BACKUP_TMP_DIR}/mail_data/mail.tar.gz" -C "${MAILU_BASE_DIR}"
        log "Mail directory restored"
    fi
    
    # Restore user data
    if [ -f "${BACKUP_TMP_DIR}/mail_data/data.tar.gz" ]; then
        tar -xzf "${BACKUP_TMP_DIR}/mail_data/data.tar.gz" -C "${MAILU_BASE_DIR}"
        log "User data restored"
    fi
fi

# Restore DKIM keys
if [ "${RESTORE_DKIM}" = "true" ]; then
    log "Restoring DKIM keys"
    
    if [ -d "${BACKUP_TMP_DIR}/dkim-keys" ]; then
        mkdir -p "${MAILU_BASE_DIR}/dkim"
        cp -r "${BACKUP_TMP_DIR}/dkim-keys"/* "${MAILU_BASE_DIR}/dkim/"
        log "DKIM keys restored"
    fi
fi

# Set proper permissions
log "Setting proper permissions"
chown -R root:root "${MAILU_BASE_DIR}"

# Start Mailu services
log "Starting Mailu services"
cd "${MAILU_BASE_DIR}" || exit 1
docker-compose up -d

# Wait for services to start
log "Waiting for Mailu services to start..."
sleep 10

# Clean up
log "Cleaning up temporary files"
rm -rf "${BACKUP_TMP_DIR:?}"/*

log "Restore completed successfully"
send_notification "Mailu Restore Complete" "Successfully restored from $(basename "${BACKUP_FILE}")" "high"

echo ""
echo "Restore completed successfully!"
echo "Please check the logs at ${RESTORE_LOG} for details."
echo "You may need to refresh DNS records and verify mail flow."

exit 0