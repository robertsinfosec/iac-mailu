---
# tasks file for docker_base role

- name: Check if Docker is already installed
  ansible.builtin.command: "docker --version"
  register: docker_check
  changed_when: false
  failed_when: false
  check_mode: false

- name: Install required packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - python3-pip
    state: present
    update_cache: true
  become: true
  when: ansible_os_family == "Debian" and docker_check.rc != 0

- name: Add Docker GPG key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  become: true
  when: ansible_os_family == "Debian" and docker_check.rc != 0

- name: Add Docker APT repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
  become: true
  when: ansible_os_family == "Debian" and ansible_distribution == "Ubuntu" and docker_check.rc != 0

- name: Add Docker APT repository (Debian)
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
    state: present
  become: true
  when: ansible_os_family == "Debian" and ansible_distribution == "Debian" and docker_check.rc != 0

- name: Install Docker packages
  ansible.builtin.apt:
    name: "{{ docker_packages }}"
    state: present
    update_cache: true
  become: true
  when: ansible_os_family == "Debian" and docker_check.rc != 0

- name: Create Docker daemon configuration directory
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: '0755'
  become: true
  when: docker_daemon_options is defined and docker_daemon_options | length > 0

- name: Configure Docker daemon
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    mode: '0644'
  become: true
  notify: Restart Docker service
  when: docker_daemon_options is defined and docker_daemon_options | length > 0

- name: Ensure Docker service is started and enabled
  ansible.builtin.service:
    name: "{{ docker_service_name }}"
    state: started
    enabled: true
  become: true

- name: Add users to Docker group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: docker
    append: true
  become: true
  loop: "{{ docker_users }}"
  when: docker_users is defined and docker_users | length > 0

- name: Install Docker Compose
  ansible.builtin.pip:
    name: docker-compose
    state: latest
  become: true
  when: docker_compose_version == "latest"

- name: Install specific Docker Compose version
  ansible.builtin.pip:
    name: "docker-compose=={{ docker_compose_version }}"
    state: present
  become: true
  when: docker_compose_version != "latest"

- name: Create Docker networks
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver }}"
    attachable: "{{ item.attachable | default(false) }}"
    ipam_config: "{{ item.ipam_config | default(omit) }}"
    state: present
  loop: "{{ docker_networks }}"
  when: docker_networks is defined and docker_networks | length > 0

- name: Set up Docker system prune cron job
  ansible.builtin.cron:
    name: "Docker system prune"
    job: "docker system prune {{ docker_autoclean_options }} > /dev/null 2>&1"
    hour: "{{ docker_autoclean_schedule.split(' ')[1] }}"
    minute: "{{ docker_autoclean_schedule.split(' ')[0] }}"
    weekday: "{{ docker_autoclean_schedule.split(' ')[4] }}"
    user: root
  become: true
  when: docker_enable_autoclean | bool

- name: Verify Docker installation
  ansible.builtin.command: "docker info"
  register: docker_info
  changed_when: false
  check_mode: false

- name: Display Docker version information
  ansible.builtin.debug:
    var: docker_info.stdout_lines