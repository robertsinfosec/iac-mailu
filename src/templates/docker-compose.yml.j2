{% raw %}
# {{ ansible_managed }} - Generated by Ansible
version: '3.7'

networks:
  mailu-internal:
    driver: bridge
    internal: false # Set to true if only Traefik needs external access
  {{ traefik_network_name }}:
    external: true

volumes:
  mailu_data: {}
  mailu_certs: {}
  mailu_overrides: {}
  # Add more volumes if needed (e.g., for backups)

services:

  # External dependencies
  traefik:
    image: traefik:v2.10 # Use a specific version
    container_name: traefik
    restart: unless-stopped
    networks:
      - {{ traefik_network_name }}
    ports:
      - "443:443/tcp" # HTTPS
      # - "80:80/tcp" # HTTP (Optional, if needed for redirects or ACME http-01)
      # Add ports for mail protocols if Traefik handles TCP routing
      # - "25:25/tcp"
      # - "143:143/tcp"
      # - "993:993/tcp"
      # - "110:110/tcp"
      # - "995:995/tcp"
      # - "465:465/tcp"
      # - "587:587/tcp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "{{ traefik_config_dir }}/traefik.yml:/etc/traefik/traefik.yml:ro" # Static config
      - "{{ traefik_config_dir }}/dynamic_conf.yml:/etc/traefik/dynamic_conf.yml:ro" # Dynamic config (generated by Ansible)
      - mailu_certs:/certs # Volume for ACME certs
    environment:
      - CLOUDFLARE_EMAIL={{ lookup('env', 'CLOUDFLARE_EMAIL') }} # Or use API Token
      - CLOUDFLARE_DNS_API_TOKEN={{ vault_cloudflare_api_token }}
      # - CLOUDFLARE_API_KEY={{ lookup('env', 'CLOUDFLARE_API_KEY') }} # Alternative
    labels:
      # Enable Traefik dashboard (optional, secure it properly!)
      # - "traefik.enable=true"
      # - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.{{ primary_domain }}`)"
      # - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      # - "traefik.http.routers.traefik-dashboard.service=api@internal"
      # - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"
      # Add basic auth middleware for dashboard security
      # - "traefik.http.middlewares.admin-auth.basicauth.users=admin:$$apr1$$..."
      # - "traefik.http.routers.traefik-dashboard.middlewares=admin-auth"
      - "traefik.docker.network={{ traefik_network_name }}"

  # Mailu Core Services
  front:
    image: {{ mailu_image_front | default('mailu/nginx:latest') }}
    container_name: mailu_front
    restart: unless-stopped
    env_file: .env
    networks:
      - mailu-internal
      - {{ traefik_network_name }} # Connect to Traefik network
    volumes:
      - mailu_certs:/certs
      - mailu_overrides:/overrides:ro
    depends_on:
      - resolver
    labels:
      - "traefik.enable=true"
      # Let dynamic config handle routing based on Host()
      - "traefik.docker.network={{ traefik_network_name }}"
      # Define services for Traefik dynamic config
      - "traefik.http.services.mailu-front.loadbalancer.server.port=80"

  resolver:
    image: {{ mailu_image_resolver | default('mailu/unbound:latest') }}
    container_name: mailu_resolver
    env_file: .env
    networks:
      mailu-internal:
    restart: unless-stopped

  admin:
    image: {{ mailu_image_admin | default('mailu/admin:latest') }}
    container_name: mailu_admin
    restart: unless-stopped
    env_file: .env
    volumes:
      - mailu_data:/data
      - mailu_certs:/certs
    depends_on:
      - redis
      - front
      - postgres # If using postgres
      # - mysql # If using mysql
    networks:
      - mailu-internal
      - {{ traefik_network_name }} # Connect to Traefik network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network={{ traefik_network_name }}"
      # Define services for Traefik dynamic config
      - "traefik.http.services.mailu-admin.loadbalancer.server.port=80"

  imap:
    image: {{ mailu_image_imap | default('mailu/dovecot:latest') }}
    container_name: mailu_imap
    restart: unless-stopped
    env_file: .env
    volumes:
      - mailu_data:/data
      - mailu_certs:/certs
      - /dev/shm:/dev/shm # Optimize performance
    depends_on:
      - front
      - postgres # If using postgres
      # - mysql # If using mysql
    networks:
      - mailu-internal
    # Expose ports directly or via Traefik TCP routing
    # ports:
    #   - "143:143"
    #   - "993:993"
    #   - "110:110"
    #   - "995:995"

  smtp:
    image: {{ mailu_image_smtp | default('mailu/postfix:latest') }}
    container_name: mailu_smtp
    restart: unless-stopped
    env_file: .env
    volumes:
      - mailu_data:/data
      - mailu_certs:/certs
      - mailu_overrides:/overrides:ro
      - /dev/shm:/dev/shm # Optimize performance
    depends_on:
      - front
      - resolver
    networks:
      - mailu-internal
    # Expose ports directly or via Traefik TCP routing
    # ports:
    #   - "25:25"
    #   - "465:465"
    #   - "587:587"

  antispam:
    image: {{ mailu_image_antispam | default('mailu/rspamd:latest') }}
    container_name: mailu_antispam
    restart: unless-stopped
    env_file: .env
    volumes:
      - mailu_data:/data
      - mailu_overrides:/overrides:ro
      - /var/lib/rspamd # Persist rspamd data
    depends_on:
      - front
      - resolver
    networks:
      - mailu-internal

  antivirus:
    image: {{ mailu_image_antivirus | default('mailu/clamav:latest') }}
    container_name: mailu_antivirus
    restart: unless-stopped
    env_file: .env
    volumes:
      - /var/lib/clamav # Persist clamav data
    depends_on:
      - front
    networks:
      - mailu-internal

  webmail:
    image: {{ mailu_image_webmail | default('mailu/roundcube:latest') }} # Or rainloop, etc.
    container_name: mailu_webmail
    restart: unless-stopped
    env_file: .env
    volumes:
      - mailu_data:/data
    depends_on:
      - imap
      - smtp
    networks:
      - mailu-internal

  # Optional services
  fetchmail:
    image: {{ mailu_image_fetchmail | default('mailu/fetchmail:latest') }}
    container_name: mailu_fetchmail
    restart: unless-stopped
    env_file: .env
    volumes:
      - mailu_data:/data
    depends_on:
      - smtp
    networks:
      - mailu-internal

  redis:
    image: redis:alpine
    container_name: mailu_redis
    restart: unless-stopped
    volumes:
      - mailu_data:/data
    networks:
      - mailu-internal

  # Database (Choose one)
  # postgres:
  #   image: postgres:alpine
  #   container_name: mailu_postgres
  #   restart: unless-stopped
  #   volumes:
  #     - mailu_data:/var/lib/postgresql/data
  #   env_file: .env
  #   networks:
  #     - mailu-internal

  # mysql:
  #   image: mariadb # Or mysql
  #   container_name: mailu_mysql
  #   restart: unless-stopped
  #   volumes:
  #     - mailu_data:/var/lib/mysql
  #   env_file: .env
  #   networks:
  #     - mailu-internal

  # Security
  {% if crowdsec_enabled %}
  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    restart: unless-stopped
    env_file: .env # May need specific CrowdSec env vars
    networks:
      - mailu-internal
    volumes:
      - /var/log:/var/log/host/:ro # Mount host logs if needed
      - ./crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml # Acquisition config
      - crowdsec_data:/var/lib/crowdsec/data/
      - crowdsec_config:/etc/crowdsec/
    depends_on:
      - traefik # If parsing Traefik logs
      - smtp
      - imap
    # Add capabilities if needed for log inspection
    # cap_add:
    #   - NET_ADMIN # For iptables bouncer

  crowdsec-traefik-bouncer:
    image: crowdsecurity/traefik-bouncer:latest
    container_name: crowdsec_traefik_bouncer
    restart: unless-stopped
    networks:
      - {{ traefik_network_name }}
    environment:
      CROWDSEC_LAPI_KEY: "{{ vault_crowdsec_lapi_key }}" # Generate this key on crowdsec container
      CROWDSEC_LAPI_URL: http://crowdsec:8080
      GIN_MODE: release
    depends_on:
      - crowdsec
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network={{ traefik_network_name }}"
      - "traefik.http.middlewares.crowdsec-bouncer.forwardauth.address=http://crowdsec-traefik-bouncer:8080/api/v1/forwardAuth"
      - "traefik.http.middlewares.crowdsec-bouncer.forwardauth.trustForwardHeader=true"
      # Apply this middleware globally in Traefik static config or per-router
  {% endif %}

volumes:
  crowdsec_data: {}
  crowdsec_config: {}
{% endraw %}